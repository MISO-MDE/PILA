// automatically generated by Xtext
grammar co.edu.uniandes.Pagos with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//import "http://www.edu.co/uniandes/Pagos" 
generate pagos "http://www.edu.co/uniandes/Pagos"

Application:
	LBRACE
		'name' COLON name = ID
		COMMA
		'intermediary' COLON intermediary = Intermediary
	RBRACE
	;
	
Intermediary:
	{Intermediary}
	LBRACE
		'name' COLON name = ID
		COMMA
		'superentities' COLON LBRACKET superentities += SuperEntity (COMMA superentities += SuperEntity)* RBRACKET
	RBRACE
	;

SuperEntity:
	{SuperEntity}
	LBRACE
		'name' COLON name = ID
		COMMA
		'description' COLON description = STRING
		COMMA
		'attributes' COLON 
			LBRACKET attLists += BusinessAttribute (COMMA attLists += BusinessAttribute)* RBRACKET
		COMMA
		'entities' COLON LBRACKET participants += Participant (COMMA participants += Participant)* RBRACKET		
	RBRACE
;

Participant:
	{Participant}
	LBRACE
		'name' COLON name = ID
		COMMA
		'description' COLON description = STRING
		COMMA
		'attributes' COLON 
			LBRACKET attLists += BusinessAttribute (COMMA attLists += BusinessAttribute)* RBRACKET
	RBRACE
	(COMMA
	'InformationTemplate' COLON LBRACKET templatesForms += InformationTemplate (COMMA templatesForms += InformationTemplate)*)? RBRACKET
	;

Provider:
	{Provider}
	LBRACE
		'name' COLON name = ID
		COMMA
		'description' COLON description = STRING
		COMMA
		'attributes' COLON 
			LBRACKET attLists += BusinessAttribute (COMMA attLists += BusinessAttribute)* RBRACKET
	RBRACE
	;

InformationTemplate:
	{InformationTemplate}
	LBRACE
		'name' COLON name = ID
		COMMA
		'description' COLON description = STRING
		COMMA
		'FormAttributes' COLON 
			LBRACKET attLists += BusinessAttribute (COMMA attLists += BusinessAttribute)* RBRACKET
	RBRACE
	(COMMA
	'calculationtemplates' templateCalc = ID COLON LBRACKET templates += CalculationTemplate (COMMA templates += CalculationTemplate)* RBRACKET)?	
	(COMMA 'providers' COLON LBRACKET providers += Provider (COMMA providers += Provider)* RBRACKET)?
;

CalculationTemplate:
	{CalculationTemplate}
	LBRACE
		'name' COLON name = ID
		COMMA
		'description' COLON description = STRING
		(COMMA
		'calculationattributes' COLON 
			LBRACKET attLists += BusinessAttribute (COMMA attLists += BusinessAttribute)* RBRACKET)?
		COMMA
		'calculationrules' COLON formulas = Formula
	RBRACE
	;

Formula returns Formula:
	{Formula}
	formulaBody += (IfBlock)* | formulaReturn = ReturnBlock;

IfBlock returns IfBlock:
	{IfBlock}
	ifSentence = IfCondition (ELSE elseSentence = ElseSegment)? 
;

IfCondition returns IfCondition:
	{IfCondition}
		IF LBRACKET
			logExp += ExpresionLogica
			RBRACKET
		THEN
		LBRACE
			formulaReturn = ReturnBlock
		RBRACE
	;

ElseSegment returns ElseSegment:
	{ElseSegment}
		LBRACE ifSentence = Formula RBRACE

;

//Quede aqui para ver como puedo eliminar algunas entidades
ReturnBlock returns ReturnBlock:
	{ReturnBlock}
	RETURN COLON expression += Adicion
;


ExpresionLogica returns ExpresionLogica:
	variable += TerminalValue (logOper += OPERADORLOGICO (variable2 += TerminalValue | literal += STRING))+
			(conOper = LOGICALCONN (exp += ExpresionLogica))?
;


Adicion returns Expression:
	Multiplicacion ({Adicion.left = current} operator = ADDOP rexp = Multiplicacion)*
;

Multiplicacion returns Expression:
		SigleExp ({Multiplicacion.left = current} operator = MULTOP rexp = SigleExp)*
		;

SigleExp returns Expression:
	TerminalValue | '(' Adicion ')'
;	

BusinessAttribute:
	{BusinessAttribute}
	LBRACE
		name = ID COLON type = TYPE (':=' exp = Adicion)? (isIndex = INDEX)? 
	RBRACE 
	;
	
TerminalValue returns TerminalValue:
	{TerminalValue}
	('PA' DOT parent = [Participant] DASH)? variable = [BusinessAttribute] | 
	('SU' DOT parent = [SuperEntity] DASH variable = [BusinessAttribute])? |
	('IT' DOT parent = [InformationTemplate] DASH variable = [BusinessAttribute])? |
	('FU' DOT parent = [CalculationTemplate])? |
	valor = Number
;	
	

/*
mathADD returns mathADD:
	operador = ADDOP
;

mathMULT returns mathMULT:
	operador = MULTOP
;
*/

Number:
	EDouble | Integer
;

EDouble returns ecore::EDouble:
	INT? DOT INT (('E'|'e') INT)?;

Integer returns ecore::EInt:
	INT
;

EString returns ecore::EString:
	STRING | ID;
	
/* Terminals */

terminal INDEX: '@Indice'; 
terminal IF:'SI';
terminal THEN:'ENTONCES';
terminal ELSE: 'SINO';
terminal RETURN: 'RETORNAR';

terminal TYPE: 'String' | 'Integer' | 'Date' | 'Double';

terminal MULTOP: '*' | '/';
terminal ADDOP: '+' | '-';

terminal LOGICALCONN: '&&' | '||';

terminal ID:('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal OPERADORLOGICO: ('<' | '>' | '<=' | '>=' | '=' | '<>' | '!=');

terminal LBRACE: "{";
terminal RBRACE: "}";
terminal LBRACKET:"[";
terminal RBRACKET: "]";
terminal COMMA: ",";
terminal COLON: ':';
terminal DASH: "#";
terminal DOT: '.';

terminal STRING:
	'"' (STR_ESC | !('"'|'\r'|'\n'|'\\'))* '"'
	;
	
terminal STR_ESC:
	'\\'('b'|'t'|'n'|'f'|'r'|'"'|'\\'|'$')
	;


